package microserviceMetamodel.xtend;

import com.google.common.base.Objects;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import microserviceMetamodel.Configuration;
import microserviceMetamodel.Endpoint;
import microserviceMetamodel.MetaModelStructure;
import microserviceMetamodel.Microservice;
import microserviceMetamodel.MicroserviceType;
import microserviceMetamodel.OperationToOperationCallingDependency;
import microserviceMetamodel.RESTOperation;
import microserviceMetamodel.RESTVerb;
import microserviceMetamodel.Version;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class EnvironmentGenerator {
  private File basePath;
  
  private MetaModelStructure mms;
  
  private int configurationId;
  
  public EnvironmentGenerator(final File basePath, final MetaModelStructure mms) {
    this.basePath = basePath;
    this.mms = mms;
    this.configurationId = 0;
    this.createProjects();
  }
  
  public EnvironmentGenerator(final File basePath, final MetaModelStructure mms, final int configurationId) {
    this.basePath = basePath;
    this.mms = mms;
    this.configurationId = configurationId;
    this.createProjects();
  }
  
  public void createProjects() {
    EList<Configuration> _configurations = this.mms.getConfigurations();
    Configuration _get = _configurations.get(this.configurationId);
    EList<Microservice> _microservices = _get.getMicroservices();
    for (final Microservice ms : _microservices) {
      {
        final MicroserviceType mst = ms.getMicroserviceType();
        String _identifier = mst.getIdentifier();
        final File projectDir = this.createProjectStructure(_identifier);
        this.createMicroserviceTypeFile(projectDir, mst, ms);
        this.createMicroserviceFile(projectDir, mst, ms);
        this.createSpringbootInitFile(projectDir, mst);
        this.createOutInterceptorFile(projectDir);
        this.createInInterceptorFile(projectDir);
        this.createRestInterceptorConstantsFile(projectDir);
        this.createThreadSpecificInterceptedDataFile(projectDir);
        this.createPomFile(projectDir, mst, ms);
        this.createAopSettingsFile(projectDir);
        String _identifier_1 = mst.getIdentifier();
        String _plus = (_identifier_1 + "-");
        Version _version = ms.getVersion();
        String _versionString = _version.getVersionString();
        String _plus_1 = (_plus + _versionString);
        this.createDockerfile(projectDir, _plus_1);
        this.createKubernetesService(projectDir, mst, ms);
        this.createKubernetesController(projectDir, mst, ms);
        this.createKiekerMonitoringPropertiesFile(projectDir);
        this.createMicroserviceBaseInfoFile(projectDir, mst);
        this.createMicroserviceRegistrationInfoFile(projectDir, mst);
      }
    }
  }
  
  public void createPomFile(final File dir, final MicroserviceType mst, final Microservice ms) {
    String _path = dir.getPath();
    String _plus = (_path + "/pom.xml");
    final File file = new File(_plus);
    CharSequence _genPomContent = this.genPomContent(mst, ms);
    String _string = _genPomContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createAopSettingsFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/resources/aop-settings.xml");
    final File file = new File(_plus);
    CharSequence _genAopSettingsContent = this.genAopSettingsContent();
    String _string = _genAopSettingsContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createDockerfile(final File dir, final String nameVersion) {
    String _path = dir.getPath();
    String _plus = (_path + "/Dockerfile");
    final File file = new File(_plus);
    CharSequence _genDockerfile = this.genDockerfile(nameVersion);
    String _string = _genDockerfile.toString();
    this.writeToFile(file, _string);
  }
  
  public void createSpringbootInitFile(final File dir, final MicroserviceType mst) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/com/example/");
    String _identifier = mst.getIdentifier();
    String _plus_1 = (_plus + _identifier);
    String _plus_2 = (_plus_1 + "/MicroserviceApplication.java");
    final File file = new File(_plus_2);
    CharSequence _genMicroserviceApplicationContent = this.genMicroserviceApplicationContent(mst);
    String _string = _genMicroserviceApplicationContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createMicroserviceTypeFile(final File dir, final MicroserviceType mst, final Microservice ms) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/com/example/");
    String _identifier = mst.getIdentifier();
    String _plus_1 = (_plus + _identifier);
    String _plus_2 = (_plus_1 + "/MicroserviceType.java");
    final File file = new File(_plus_2);
    CharSequence _genMicroserviceTypeContent = this.genMicroserviceTypeContent(mst, ms);
    String _string = _genMicroserviceTypeContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createMicroserviceFile(final File dir, final MicroserviceType mst, final Microservice ms) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/com/example/");
    String _identifier = mst.getIdentifier();
    String _plus_1 = (_plus + _identifier);
    String _plus_2 = (_plus_1 + "/Microservice.java");
    final File file = new File(_plus_2);
    CharSequence _genMicroserviceContent = this.genMicroserviceContent(mst, ms);
    String _string = _genMicroserviceContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createKubernetesService(final File dir, final MicroserviceType mst, final Microservice ms) {
    String _path = dir.getPath();
    String _plus = (_path + "/kubernetes/service.yaml");
    final File file = new File(_plus);
    CharSequence _genKubernetesServiceFile = this.genKubernetesServiceFile(mst, ms);
    String _string = _genKubernetesServiceFile.toString();
    this.writeToFile(file, _string);
  }
  
  public void createKubernetesController(final File dir, final MicroserviceType mst, final Microservice ms) {
    String _path = dir.getPath();
    String _plus = (_path + "/kubernetes/controller.yaml");
    final File file = new File(_plus);
    CharSequence _genKubernetesControllerFile = this.genKubernetesControllerFile(mst, ms);
    String _string = _genKubernetesControllerFile.toString();
    this.writeToFile(file, _string);
  }
  
  public void createOutInterceptorFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/kieker/monitoring/probe/spring/flow/RestOutInterceptor.java");
    final File file = new File(_plus);
    CharSequence _genOutInterceptor = this.genOutInterceptor();
    String _string = _genOutInterceptor.toString();
    this.writeToFile(file, _string);
  }
  
  public void createInInterceptorFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/kieker/monitoring/probe/spring/flow/RestInInterceptor.java");
    final File file = new File(_plus);
    CharSequence _genInInterceptor = this.genInInterceptor();
    String _string = _genInInterceptor.toString();
    this.writeToFile(file, _string);
  }
  
  public void createRestInterceptorConstantsFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/kieker/monitoring/probe/spring/flow/RestInterceptorConstants.java");
    final File file = new File(_plus);
    CharSequence _genRestInterceptorConstants = this.genRestInterceptorConstants();
    String _string = _genRestInterceptorConstants.toString();
    this.writeToFile(file, _string);
  }
  
  public void createThreadSpecificInterceptedDataFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/kieker/monitoring/probe/spring/flow/ThreadSpecificInterceptedData.java");
    final File file = new File(_plus);
    CharSequence _genThreadSpecificInterceptedDataContent = this.genThreadSpecificInterceptedDataContent();
    String _string = _genThreadSpecificInterceptedDataContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createMicroserviceBaseInfoFile(final File dir, final MicroserviceType mst) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/com/example/");
    String _identifier = mst.getIdentifier();
    String _plus_1 = (_plus + _identifier);
    String _plus_2 = (_plus_1 + "/MicroserviceBaseInfo.java");
    final File file = new File(_plus_2);
    CharSequence _genMicroserviceBaseInfoContent = this.genMicroserviceBaseInfoContent(mst);
    String _string = _genMicroserviceBaseInfoContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createMicroserviceRegistrationInfoFile(final File dir, final MicroserviceType mst) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/java/com/example/");
    String _identifier = mst.getIdentifier();
    String _plus_1 = (_plus + _identifier);
    String _plus_2 = (_plus_1 + "/MicroserviceRegistrationInfo.java");
    final File file = new File(_plus_2);
    CharSequence _genMicroserviceRegistrationInfoContent = this.genMicroserviceRegistrationInfoContent(mst);
    String _string = _genMicroserviceRegistrationInfoContent.toString();
    this.writeToFile(file, _string);
  }
  
  public void createKiekerMonitoringPropertiesFile(final File dir) {
    String _path = dir.getPath();
    String _plus = (_path + "/src/main/resources/META-INF/kieker.monitoring.properties");
    final File file = new File(_plus);
    CharSequence _genKiekerMonitoringPropertiesFile = this.genKiekerMonitoringPropertiesFile();
    String _string = _genKiekerMonitoringPropertiesFile.toString();
    this.writeToFile(file, _string);
  }
  
  public File createProjectStructure(final String projectName) {
    String _path = this.basePath.getPath();
    String _plus = (_path + "/gen-");
    String _plus_1 = (_plus + projectName);
    final File projectDir = new File(_plus_1);
    String _path_1 = projectDir.getPath();
    String _plus_2 = (_path_1 + "/src/main/java/com/example/");
    String _plus_3 = (_plus_2 + projectName);
    File _file = new File(_plus_3);
    _file.mkdirs();
    String _path_2 = projectDir.getPath();
    String _plus_4 = (_path_2 + "/src/main/java/kieker/monitoring/probe/spring/flow");
    File _file_1 = new File(_plus_4);
    _file_1.mkdirs();
    String _path_3 = projectDir.getPath();
    String _plus_5 = (_path_3 + "/src/main/resources/META-INF");
    File _file_2 = new File(_plus_5);
    _file_2.mkdirs();
    String _path_4 = projectDir.getPath();
    String _plus_6 = (_path_4 + "/kubernetes");
    File _file_3 = new File(_plus_6);
    _file_3.mkdir();
    return projectDir;
  }
  
  public CharSequence genMicroserviceTypeContent(final MicroserviceType mst, final Microservice ms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.");
    MicroserviceType _microserviceType = ms.getMicroserviceType();
    String _identifier = _microserviceType.getIdentifier();
    _builder.append(_identifier, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.lang.annotation.Annotation;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Method;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import kieker.monitoring.probe.spring.flow.RestOutInterceptor;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMapping;");
    _builder.newLine();
    _builder.append("import org.springframework.web.client.RestTemplate;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.springframework.web.bind.annotation.RequestMethod.GET;");
    _builder.newLine();
    _builder.append("import static org.springframework.web.bind.annotation.RequestMethod.PUT;");
    _builder.newLine();
    _builder.append("import static org.springframework.web.bind.annotation.RequestMethod.POST;");
    _builder.newLine();
    _builder.append("import static org.springframework.web.bind.annotation.RequestMethod.DELETE;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class MicroserviceType {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String type = \"");
    MicroserviceType _microserviceType_1 = ms.getMicroserviceType();
    String _identifier_1 = _microserviceType_1.getIdentifier();
    _builder.append(_identifier_1, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected String version = \"1.0.0\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static String uuid = java.util.UUID.randomUUID().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int delay = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private RestTemplate restTemplate = new RestTemplate();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MicroserviceType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("restTemplate.setInterceptors(Collections.singletonList(new RestOutInterceptor()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.register();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<String> getRegistrationMethods() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<String> methodList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(Method m : this.getClass().getMethods()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Annotation[] annotations = m.getDeclaredAnnotations();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for(Annotation a : annotations) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if(a.annotationType() == RequestMapping.class) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("methodList.add(m.getName());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return methodList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void register() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Registering the service..\");");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("List<String> methods = this.getRegistrationMethods();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("MicroserviceRegistrationInfo microserviceRegistrationInfo = new MicroserviceRegistrationInfo(this.type, this.uuid, methods);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("new RestTemplate().postForObject(\"http://registry:8080/register\", microserviceRegistrationInfo, Object.class);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("System.out.print(\"done.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/info\", method = GET)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getInfo() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Integer requestDelay(String method) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Integer result = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("RestTemplate rt = new RestTemplate();");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Integer tempResult = rt.getForObject(\"http://registry:8080/delay?type=\" + this.type + \"&uuid=\" + this.uuid + \"&method=\" + method, Integer.class);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(null != tempResult)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("result = tempResult;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<RESTOperation> _restOperations = mst.getRestOperations();
      for(final RESTOperation operation : _restOperations) {
        _builder.append("\t");
        _builder.append("@RequestMapping(value = \"");
        String _subPath = operation.getSubPath();
        _builder.append(_subPath, "\t");
        _builder.append("\", method = ");
        RESTVerb _restVerb = operation.getRestVerb();
        String _string = _restVerb.toString();
        _builder.append(_string, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public String ");
        String _name = operation.getName();
        _builder.append(_name, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("Integer delay = requestDelay(\"");
        String _name_1 = operation.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("Thread.sleep(delay);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("} catch(InterruptedException ie) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("System.out.println(\"Exception occurred while trying to inject delay of \" + delay + \". (\" + ie.getMessage() + \")\");");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        {
          EList<OperationToOperationCallingDependency> _dependencies = mst.getDependencies();
          for(final OperationToOperationCallingDependency otocd : _dependencies) {
            {
              RESTOperation _callingOperation = otocd.getCallingOperation();
              String _name_2 = _callingOperation.getName();
              String _name_3 = operation.getName();
              boolean _equals = Objects.equal(_name_2, _name_3);
              if (_equals) {
                {
                  Version _callingVersion = otocd.getCallingVersion();
                  Version _version = ms.getVersion();
                  boolean _equals_1 = Objects.equal(_callingVersion, _version);
                  if (_equals_1) {
                    _builder.append("\t");
                    _builder.append("restTemplate.getForObject(\"http://");
                    MicroserviceType _calledMicroservice = otocd.getCalledMicroservice();
                    String _identifier_2 = _calledMicroservice.getIdentifier();
                    _builder.append(_identifier_2, "\t");
                    _builder.append(":8080");
                    RESTOperation _calledOperation = otocd.getCalledOperation();
                    String _subPath_1 = _calledOperation.getSubPath();
                    _builder.append(_subPath_1, "\t");
                    _builder.append("\", String.class);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return \"Operation ");
        String _name_4 = operation.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(" executed successfully.\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genMicroserviceContent(final MicroserviceType mst, final Microservice ms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RestController;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RestController");
    _builder.newLine();
    _builder.append("public class Microservice extends MicroserviceType {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getInfo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String type = super.getInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return type + \":\" + version + \":\" + uuid.toString();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genMicroserviceApplicationContent(final MicroserviceType mst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.concurrent.TimeUnit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.IMonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.MonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.probe.spring.flow.RestInInterceptor;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.SpringApplication;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.autoconfigure.SpringBootApplication;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.ImportResource;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.config.annotation.InterceptorRegistry;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SpringBootApplication");
    _builder.newLine();
    _builder.append("@ImportResource(\"classpath:aop-settings.xml\")");
    _builder.newLine();
    _builder.append("public class MicroserviceApplication extends WebMvcConfigurerAdapter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SpringApplication.run(MicroserviceApplication.class, args);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addInterceptors(final InterceptorRegistry registry) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("registry.addInterceptor(new RestInInterceptor());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genMicroserviceBaseInfoContent(final MicroserviceType mst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class MicroserviceBaseInfo {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected String uuid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MicroserviceBaseInfo() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MicroserviceBaseInfo(String type, String uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.uuid = uuid;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getUuid() { return this.uuid;}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setUuid(String uuid) { this.uuid = uuid; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genMicroserviceRegistrationInfoContent(final MicroserviceType mst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MicroserviceRegistrationInfo extends MicroserviceBaseInfo{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> methods;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MicroserviceRegistrationInfo()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MicroserviceRegistrationInfo(String type, String uuid, List<String> methods) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(type,uuid);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.methods = methods;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getMethods() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return methods;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMethods(List<String> methodList) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.methods = methodList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> toKeys() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<String> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(String method : methods) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("result.add(this.type + \":\" + this.uuid + \":\" + method);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genPomContent(final MicroserviceType mst, final Microservice ms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\"");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0");
    _builder.newLine();
    _builder.append("http://maven.apache.org/xsd/maven-4.0.0.xsd\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<modelVersion>4.0.0</modelVersion>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<groupId>com.example.");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "    ");
    _builder.append("</groupId>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<artifactId>");
    String _identifier_1 = mst.getIdentifier();
    _builder.append(_identifier_1, "    ");
    _builder.append("</artifactId>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<version>");
    Version _version = ms.getVersion();
    String _versionString = _version.getVersionString();
    _builder.append(_versionString, "    ");
    _builder.append("</version>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<packaging>jar</packaging>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<name>");
    String _identifier_2 = mst.getIdentifier();
    _builder.append(_identifier_2, "    ");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<description></description>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<parent>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<artifactId>spring-boot-starter-parent</artifactId>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<version>1.4.0.RELEASE</version>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<relativePath/> <!-- lookup parent from repository -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</parent>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<java.version>1.8</java.version>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<repositories>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<repository>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<id>sonatype.oss.snapshots</id>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<url>https://oss.sonatype.org/content/repositories/snapshots/</url>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</repository>");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<repository>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<id>central</id>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<url>https://repo1.maven.org/maven2</url>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</repository>");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<repository>");
    _builder.newLine();
    _builder.append("        \t  ");
    _builder.append("<id>redhatga</id>");
    _builder.newLine();
    _builder.append("        \t  ");
    _builder.append("<url>https://maven.repository.redhat.com/ga/</url>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</repository>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</repositories>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<dependencies>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<artifactId>spring-boot-starter-web</artifactId>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("<groupId>net.kieker-monitoring</groupId>");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("<artifactId>kieker</artifactId>");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("<version>1.13-SNAPSHOT</version>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<artifactId>spring-boot-starter-aop</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<artifactId>spring-boot-starter-activemq</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<groupId>org.hyperic</groupId>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<artifactId>sigar</artifactId>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<version>1.6.5.132-6</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</dependencies>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<build>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<plugins>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<artifactId>spring-boot-maven-plugin</artifactId>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</plugins>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</build>");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genDockerfile(final String nameVersion) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("FROM java:openjdk-8");
    _builder.newLine();
    _builder.newLine();
    _builder.append("EXPOSE 8080");
    _builder.newLine();
    _builder.newLine();
    _builder.append("COPY target/");
    _builder.append(nameVersion, "");
    _builder.append(".jar /");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("CMD java -Dorg.apache.activemq.SERIALIZABLE_PACKAGES=* -jar ");
    _builder.append(nameVersion, "");
    _builder.append(".jar");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genKubernetesServiceFile(final MicroserviceType mst, final Microservice ms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("apiVersion: v1");
    _builder.newLine();
    _builder.append("kind: Service");
    _builder.newLine();
    _builder.append("metadata:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("name: ");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("labels:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: ");
    String _identifier_1 = mst.getIdentifier();
    _builder.append(_identifier_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("spec:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type: NodePort");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ports:");
    _builder.newLine();
    {
      EList<Endpoint> _endpoints = ms.getEndpoints();
      for(final Endpoint ep : _endpoints) {
        _builder.append("  ");
        _builder.append("- port: ");
        Integer _port = ep.getPort();
        _builder.append(_port, "  ");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("  ");
        _builder.append("name: ");
        String _protocol = ep.getProtocol();
        String _lowerCase = _protocol.toLowerCase();
        _builder.append(_lowerCase, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("selector: ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: ");
    String _identifier_2 = mst.getIdentifier();
    _builder.append(_identifier_2, "    ");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genKubernetesControllerFile(final MicroserviceType mst, final Microservice ms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("apiVersion: v1");
    _builder.newLine();
    _builder.append("kind: ReplicationController");
    _builder.newLine();
    _builder.append("metadata:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("name: ");
    String _identifier = mst.getIdentifier();
    _builder.append(_identifier, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("labels:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: ");
    String _identifier_1 = mst.getIdentifier();
    _builder.append(_identifier_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("spec:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("replicas: 1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("selector:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: ");
    String _identifier_2 = mst.getIdentifier();
    _builder.append(_identifier_2, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("template:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("metadata:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("labels:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name: ");
    String _identifier_3 = mst.getIdentifier();
    _builder.append(_identifier_3, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("spec:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("containers:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("- name: ");
    String _identifier_4 = mst.getIdentifier();
    _builder.append(_identifier_4, "      ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("image: my/");
    String _identifier_5 = mst.getIdentifier();
    _builder.append(_identifier_5, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("imagePullPolicy: IfNotPresent");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ports:");
    _builder.newLine();
    {
      EList<Endpoint> _endpoints = ms.getEndpoints();
      for(final Endpoint ep : _endpoints) {
        _builder.append("        ");
        _builder.append("- containerPort: ");
        Integer _port = ep.getPort();
        _builder.append(_port, "        ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genKiekerMonitoringPropertiesFile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("kieker.monitoring.writer=kieker.monitoring.writer.jms.AsyncJMSWriter");
    _builder.newLine();
    _builder.append("kieker.monitoring.writer.jms.AsyncJMSWriter.ProviderUrl=tcp://jmsserver:61616");
    _builder.newLine();
    _builder.append("kieker.monitoring.writer.jms.AsyncJMSWriter.Topic=kieker");
    _builder.newLine();
    _builder.append("kieker.monitoring.writer.jms.AsyncJMSWriter.ContextFactoryType=org.apache.activemq.jndi.ActiveMQInitialContextFactory");
    _builder.newLine();
    _builder.append("kieker.monitoring.writer.jms.AsyncJMSWriter.FactoryLookupName=ConnectionFactory");
    _builder.newLine();
    return _builder;
  }
  
  public void writeToFile(final File file, final String s) {
    try {
      FileOutputStream _fileOutputStream = new FileOutputStream(file);
      OutputStreamWriter _outputStreamWriter = new OutputStreamWriter(_fileOutputStream, "utf-8");
      final BufferedWriter writer = new BufferedWriter(_outputStreamWriter);
      writer.write(s);
      writer.flush();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public CharSequence genOutInterceptor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package kieker.monitoring.probe.spring.flow;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.http.HttpHeaders;");
    _builder.newLine();
    _builder.append("import org.springframework.http.HttpRequest;");
    _builder.newLine();
    _builder.append("import org.springframework.http.client.ClientHttpRequestExecution;");
    _builder.newLine();
    _builder.append("import org.springframework.http.client.ClientHttpRequestInterceptor;");
    _builder.newLine();
    _builder.append("import org.springframework.http.client.ClientHttpResponse;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import kieker.common.logging.Log;");
    _builder.newLine();
    _builder.append("import kieker.common.logging.LogFactory;");
    _builder.newLine();
    _builder.append("import kieker.common.record.controlflow.OperationExecutionRecord;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.IMonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.MonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.registry.ControlFlowRegistry;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.registry.SessionRegistry;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.timer.ITimeSource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RestOutInterceptor implements ClientHttpRequestInterceptor {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Log LOG = LogFactory.getLog(RestOutInterceptor.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final IMonitoringController CTRLINST = MonitoringController.getInstance();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final ITimeSource TIME = CTRLINST.getTimeSource();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String VMNAME = CTRLINST.getHostname();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final ControlFlowRegistry CF_REGISTRY = ControlFlowRegistry.INSTANCE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final SessionRegistry SESSION_REGISTRY = SessionRegistry.INSTANCE;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String SIGNATURE = \"public void com.example.intercept.out.RestOutInterceptor.interceptOutgoingRequest()\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ClientHttpResponse intercept(final HttpRequest request, final byte[] body, final ClientHttpRequestExecution execution) throws IOException {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!CTRLINST.isMonitoringEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return execution.execute(request, body);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean entrypoint = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String hostname = VMNAME;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String sessionId = SESSION_REGISTRY.recallThreadLocalSessionId();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int eoi; // this is executionOrderIndex-th execution in this trace");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int ess; // this is the height in the dynamic call tree of this execution");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int nextESS;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("long traceId = CF_REGISTRY.recallThreadLocalTraceId(); // traceId, -1 if entry point");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (traceId == -1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("entrypoint = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("traceId = CF_REGISTRY.getAndStoreUniqueThreadLocalTraceId();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalEOI(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalESS(1); // next operation is ess + 1");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eoi = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ess = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("nextESS = 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("entrypoint = false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eoi = CF_REGISTRY.incrementAndRecallThreadLocalEOI();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ess = CF_REGISTRY.recallAndIncrementThreadLocalESS();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("nextESS = ess + 1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if ((eoi == -1) || (ess == -1)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.error(\"eoi and/or ess have invalid values:\" + \" eoi == \" + eoi + \" ess == \" + ess);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CTRLINST.terminateMonitoring();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Get request header");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpHeaders headers = request.getHeaders();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("headers.add(\"KiekerTracingInfo\", Long.toString(traceId) + \",\" + sessionId + \",\" + Integer.toString(eoi) + \",\" + Integer.toString(nextESS));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (LOG.isDebugEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.debug(\"Sending request to \" + request.getURI().toString() + \" with header = \" + headers.toString());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// measure before");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final long tin = TIME.getTime();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// execution of the called method");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object retval = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("retval = execution.execute(request, body);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// measure after");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final long tout = TIME.getTime();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Process response");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (retval instanceof ClientHttpResponse) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final ClientHttpResponse response = (ClientHttpResponse) retval;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final HttpHeaders responseHeaders = response.getHeaders();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (responseHeaders != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("final List<String> responseHeaderList = responseHeaders.get(\"KiekerTracingInfo\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (responseHeaderList != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (LOG.isDebugEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("LOG.debug(\"Received response from \" + responseHeaders.getLocation().toString() + \" with header = \" + responseHeaders.toString());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("final String[] responseHeaderArray = responseHeaderList.get(0).split(\",\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// Extract trace id");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("final String retTraceIdStr = responseHeaderArray[0];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Long retTraceId = -1L;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (!\"null\".equals(retTraceIdStr)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("retTraceId = Long.parseLong(retTraceIdStr);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (final NumberFormatException exc) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("LOG.warn(\"Invalid tradeId\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (traceId != retTraceId) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("LOG.error(\"TraceId in response header (\" + retTraceId + \") is different from that in request header (\" + traceId + \")\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// Extract session id");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String retSessionId = responseHeaderArray[1];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (\"null\".equals(retSessionId)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("retSessionId = OperationExecutionRecord.NO_SESSION_ID;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// Extract eoi");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("int retEOI = -1;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("final String retEOIStr = responseHeaderArray[2];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (!\"null\".equals(retEOIStr)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("retEOI = Integer.parseInt(retEOIStr);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalEOI(retEOI);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (final NumberFormatException exc) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("LOG.warn(\"Invalid eoi\", exc);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (LOG.isDebugEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("LOG.debug(\"No monitoring data found in the response header from \" + responseHeaders.getLocation().toString() + \". Is it instrumented?\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (LOG.isDebugEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("LOG.debug(\"Response header from \" + response.getHeaders().getLocation().toString() + \" is null. Is it instrumented?\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("response.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CTRLINST.newMonitoringRecord(new OperationExecutionRecord(RestOutInterceptor.SIGNATURE, sessionId, traceId, tin, tout, hostname, eoi, ess));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// cleanup");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (entrypoint) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalTraceId();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalEOI();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalESS();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("SESSION_REGISTRY.unsetThreadLocalSessionId();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalESS(ess); // next operation is ess");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (ClientHttpResponse) retval;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genInInterceptor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package kieker.monitoring.probe.spring.flow;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletRequest;");
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletResponse;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import kieker.common.logging.Log;");
    _builder.newLine();
    _builder.append("import kieker.common.logging.LogFactory;");
    _builder.newLine();
    _builder.append("import kieker.common.record.controlflow.OperationExecutionRecord;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.IMonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.controller.MonitoringController;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.registry.ControlFlowRegistry;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.core.registry.SessionRegistry;");
    _builder.newLine();
    _builder.append("import kieker.monitoring.timer.ITimeSource;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.mvc.WebContentInterceptor;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RestInInterceptor extends WebContentInterceptor {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String SESSION_ID_ASYNC_TRACE = \"NOSESSION-ASYNCIN\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Log LOG = LogFactory.getLog(RestInInterceptor.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final IMonitoringController CTRLINST = MonitoringController.getInstance();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final ITimeSource TIME = CTRLINST.getTimeSource();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String VMNAME = CTRLINST.getHostname();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final ControlFlowRegistry CF_REGISTRY = ControlFlowRegistry.INSTANCE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final SessionRegistry SESSION_REGISTRY = SessionRegistry.INSTANCE;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ThreadLocal<ThreadSpecificInterceptedData> threadSpecificInterceptedData = new ThreadLocal<ThreadSpecificInterceptedData>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean preHandle(final HttpServletRequest request, final HttpServletResponse response, final Object handler) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String signature;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String sessionId = SESSION_REGISTRY.recallThreadLocalSessionId();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("long traceId = -1L;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("long tin;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String hostname = VMNAME;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int eoi;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int ess;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!CTRLINST.isMonitoringEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("signature = \"public void com.example.intercept.in.RestInInterceptor.interceptIncoming\" + request.getMethod() + \"Request()\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final List<String> requestRestHeader = Collections.list(request.getHeaders(RestInterceptorConstants.HEADER_FIELD));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if ((requestRestHeader == null) || (requestRestHeader.isEmpty())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.debug(\"No monitoring data found in the incoming request header\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// LOG.info(\"Will continue without sending back reponse header\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("traceId = CF_REGISTRY.getAndStoreUniqueThreadLocalTraceId();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalEOI(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalESS(1); // next operation is ess + 1");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eoi = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ess = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String operationExecutionHeader = requestRestHeader.get(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (LOG.isDebugEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.debug(\"Received request: \" + request.getRequestURI() + \"with header = \" + requestRestHeader.toString());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String[] headerArray = operationExecutionHeader.split(\",\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Extract session id");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sessionId = headerArray[1];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (\"null\".equals(sessionId)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sessionId = OperationExecutionRecord.NO_SESSION_ID;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Extract EOI");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String eoiStr = headerArray[2];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eoi = -1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eoi = 1 + Integer.parseInt(eoiStr);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (final NumberFormatException exc) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.warn(\"Invalid eoi\", exc);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Extract ESS");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String essStr = headerArray[3];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ess = -1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ess = Integer.parseInt(essStr);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (final NumberFormatException exc) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.warn(\"Invalid ess\", exc);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Extract trace id");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final String traceIdStr = headerArray[0];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (traceIdStr != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("traceId = Long.parseLong(traceIdStr);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (final NumberFormatException exc) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LOG.warn(\"Invalid trace id\", exc);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("traceId = CF_REGISTRY.getUniqueTraceId();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sessionId = SESSION_ID_ASYNC_TRACE;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eoi = 0; // EOI of this execution");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ess = 0; // ESS of this execution");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Store thread-local values");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalTraceId(traceId);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalEOI(eoi); // this execution has EOI=eoi; next execution will get eoi with incrementAndRecall");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CF_REGISTRY.storeThreadLocalESS(ess + 1); // this execution has ESS=ess");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SESSION_REGISTRY.storeThreadLocalSessionId(sessionId);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// measure before");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tin = TIME.getTime();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("threadSpecificInterceptedData.set(new ThreadSpecificInterceptedData(signature, sessionId, traceId, tin, hostname, eoi, ess));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("response.setHeader(RestInterceptorConstants.HEADER_FIELD, traceId + \",\" + sessionId + \",\" + (eoi+1) + \",\" + Integer.toString(CF_REGISTRY.recallThreadLocalESS()));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void afterCompletion(final HttpServletRequest request, final HttpServletResponse response, final Object handler, final Exception exception) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// measure after");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final long tout = TIME.getTime();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final ThreadSpecificInterceptedData tsid = threadSpecificInterceptedData.get();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CTRLINST.newMonitoringRecord(new OperationExecutionRecord(tsid.getSignature(), tsid.getSessionId(), tsid.getTraceId(), tsid.getTin(), tout, tsid.getHostname(), tsid.getEoi(), tsid.getEss()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// cleanup");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalTraceId();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalEOI();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CF_REGISTRY.unsetThreadLocalESS();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genRestInterceptorConstants() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package kieker.monitoring.probe.spring.flow;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RestInterceptorConstants {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String HEADER_FIELD = \"KiekerTracingInfo\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genThreadSpecificInterceptedDataContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package kieker.monitoring.probe.spring.flow;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ThreadSpecificInterceptedData {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String signature;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String sessionId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private long traceId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private long tin;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String hostname;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int eoi;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int ess;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ThreadSpecificInterceptedData(String signature, String sessionId, long traceId, long tin, final String hostname, int eoi, int ess) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.signature = signature;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.sessionId = sessionId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.traceId = traceId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tin = tin;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.hostname = hostname;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eoi = eoi;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.ess = ess;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getSignature() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return signature;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getSessionId() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return sessionId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public long getTraceId() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return traceId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public long getTin() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return tin;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getHostname() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return hostname;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getEoi() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eoi;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getEss() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ess;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genAopSettingsContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("xmlns:aop=\"http://www.springframework.org/schema/aop\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop.xsd\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<bean id=\"opEMII\" class=\"kieker.monitoring.probe.spring.executions.OperationExecutionMethodInvocationInterceptor\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<aop:config>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<aop:advisor advice-ref=\"opEMII\" pointcut=\"execution(public * com.example..*.*(..))\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</aop:config>");
    _builder.newLine();
    _builder.append("</beans>");
    _builder.newLine();
    return _builder;
  }
}
